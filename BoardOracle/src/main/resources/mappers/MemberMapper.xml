<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.board.mapper.MemberMapper">

<!-- 회원 가입 -->
<insert id="memberInfoRegistry" parameterType="com.board.dto.MemberDTO">
	insert into tbl_member (userid, username, password, job, gender, hobby, telno, email, regdate,
			zipcode, address, description, pwcheck, role, org_filename, stored_filename, filesize, lastpwdate)
			values (#{userid}, #{username}, #{password}, #{job}, #{gender}, #{hobby}, #{telno}, #{email}, sysdate, 
			#{zipcode}, #{address}, #{description}, 1, 'USER', #{org_filename}, #{stored_filename}, #{filesize}, #{lastpwdate})		
</insert>

<!-- 아이디 중복 확인 -->
<select id="idCheck" parameterType="string" resultType="int">
	select count(*) from tbl_member where userid = #{userid}
</select>

<!-- 회원 정보 가져오기 -->
<select id="memberInfo" parameterType="string" resultType="com.board.dto.MemberDTO">
	select * from tbl_member where userid = #{userid}
</select>

<!-- 패스워드 수정 -->
<update id="memberPasswordModify" parameterType="com.board.dto.MemberDTO">
	update tbl_member set password = #{password}, lastpwdate = #{lastpwdate}, pwcheck = #{pwcheck} where userid = #{userid}
</update>

<!-- 마지막 로그인 날짜 등록 하기 -->
<update id="lastlogindateUpdate" parameterType="com.board.dto.MemberDTO">
	update tbl_member set lastlogindate = #{lastlogindate} where userid=#{userid}
</update>

<!-- 마지막 로그아웃 날짜 등록 하기 -->
<update id="lastlogoutdateUpdate" parameterType="com.board.dto.MemberDTO">
	update tbl_member set lastlogoutdate = #{lastlogoutdate} where userid=#{userid}
</update>

<!-- o 아이디 찾기 -->
<select id="searchID" parameterType="com.board.dto.MemberDTO" resultType="string">
	select userid from tbl_member where username=#{username} and telno= #{telno}
</select>

<!-- authkey 업데이트 -->
<update id="authkeyUpdate" parameterType="com.board.dto.MemberDTO">
	update tbl_member set authkey = #{authkey} where userid=#{userid}
</update>

<!-- authkey 존재 여부 확인 -->
<select id="MemberInfoByAuthkey" parameterType="com.board.dto.MemberDTO" resultType="com.board.dto.MemberDTO">
	select * from tbl_member where authkey = #{authkey}
</select>

<!-- 우편번호 검색 -->
<!-- 	select zipcode, province, road, building, oldaddr from tbl_addr
where road like concat('%',#{addrSearch},'%') or building like concat('%',#{addrSearch},'%')
	order by zipcode limit #{startPoint}, #{postNum} -->
<select id="addrSearch" parameterType="HashMap" resultType="com.board.dto.AddressDTO">
	select zipcode, province, road, building, oldaddr from
		(select zipcode, province, road, building, oldaddr, row_number() over(order by zipcode) as rnum
			from tbl_addr where road like '%'||#{addrSearch}||'%' 
			or building like '%'||#{addrSearch}||'%') addr
		where rnum between #{startPoint} and #{endPoint} order by zipcode
</select>


<!-- 우편번호 행 최대 갯수 계산 -->
<select id="addrTotalCount" parameterType="string" resultType="int"> 
	select count(*) from tbl_addr
		where road like '%'||#{addrSearch}||'%' 
		or building like '%'||#{addrSearch}||'%'
</select>

<!-- 회원 탈퇴 -->
<delete id="deleteMember" parameterType="string">
	delete from tbl_member where userid=#{userid}
</delete>

<!-- 회원 정보 수정 -->
<update id="memberInfoUpdate" parameterType="com.board.dto.MemberDTO">
	update tbl_member set org_filename = #{org_filename}, stored_filename = #{stored_filename},
	filesize = #{filesize}, gender=#{gender}, hobby=#{hobby}, job=#{job}, 
	zipcode=#{zipcode}, telno=#{telno}, email=#{email}, description=#{description}
	where userid = #{userid}
</update>

<resultMap id="pwcheckMap" type="HashMap">
    <result property="pwcheck" column="pwcheck" />
    <result property="result" column="result" />
</resultMap>

<!-- 30일 지나면 패스워드 변경 요청 -->
<select id="PasswordChangeRequest" parameterType="string" resultMap="pwcheckMap">
select pwcheck, case when (lastlogindate - lastpwdate)/pwcheck >= 30 then 1 else 0
  end as result from tbl_member where userid = #{userid}
</select>
</mapper>